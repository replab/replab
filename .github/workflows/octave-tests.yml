# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: '*'
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# We have some environment variables
env:
  OCTFLAGS: --no-gui --no-window-system --silent
  ADDPATH_COMMAND: "replab_init('verbose', 2);"
  COVERING: true


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
    name: Run tests on Octave
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo apt-get -y -qq update
          sudo apt install flatpak
          sudo apt install gnome-software-plugin-flatpak
          echo "1"
          flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo -user
          echo "2"
          flatpak install flathub org.octave.Octave -user
          echo "3"
          # commented out: sudo apt-get -y install octave liboctave-dev octave-optim octave-symbolic openjdk-11-jre
      - name: Update Octave path
        run: |
          flatpak run org.octave.Octave $OCTFLAGS --eval "addpath (pwd); savepath ();"
      - name: before_script
        run: |
          if [ $COVERING == true ]; then
            TEST_COMMAND="exit(~replab_runtests(1,1));";
          else
            TEST_COMMAND="exit(~replab_runtests(0,1));";
          fi
          echo "TEST_COMMAND| $TEST_COMMAND";
          # Double-check we are still in the right directory
          pwd
          # Check what octave packages we have installed
          octave -q --eval "ver"
          # ---------------------------------------------------------------------------
          # Remove any cached results files from previous build, if present
          rm -f testresults.xml;
          # ---------------------------------------------------------------------------
      - name: Run tests
        run: |
          flatpak run org.octave.Octave -q --eval "$ADDPATH_COMMAND $TEST_COMMAND";
      - name: after_success
        run: |
          # Check where we ended up and what's going on where we are
          pwd
          ls -alh
          if [ $COVERING == true ]; then
            bash <(curl -s https://codecov.io/bash);
          fi

