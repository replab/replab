Doctests guide
==============

(Work in progress)

Doctests are generated by recursing the source files and looking for ``Example:`` Sphinx directives in the comments.
The corresponding Sphinx block, as defined by its indentation, represents a single doctest.
A doctest is composed of a series of statements.

Each statement is composed of a command and its expected output.
The first line of the statement has the following structure:

``>>> "command-text" [...] [% ["comment-text"] [doctest: "flags"]]``

where:

- The first three characters, ``>>>`` define the start of a statement.

- The command text ``"command-text"`` is MATLAB/Octave code.

- The command text is optionally terminated by ``...``, in which case the command text of the next line will be concatenated.

- An optional comment, which will be stripped from the constructed doctest. However, only on the first line of a statement,
  the comment may contain a ``doctest:`` substring, and the part of the comment following that substring will be interpreted as statement flags.

If a statement line representing a comment has its command part ending with ``...``, the next line is of the form:

``    "command-text" [...] [% ["comment-text"]]``

and such lines are concatenated to the first as long as they end with ``...``. Flags are only parsed on the first line of a statement.

The ``"command-text"`` has one of the following forms:

- ``statement;`` or ``a = statement;`` or ``[a, b] = statement;``, in which case only the text written to the standard output/error streams is captured and compared to the data provided by the doctest; only

- ``statement``, in which case it is expected that ``statement`` is a command that returns a single output,

- ``a = statement``, in which case the value of the variable ``a`` is captured and compared to the doctest data;

- ``[a, b] = statement``, in which case several variables are captured and compared to the doctest data.

Expected test output ends

1) when the next line is no longer a comment line
2) when another comment line starts with ``>>>``
3) when two blank comment lines are provided

In expected test output, blank lines are ignored. Errors are not captured, and will crash the test handler.

Test files are written in the MoXUnit format, using functions and subfunctions as the
rest of the RepLAB test suite; the helper function ``assertEqualEvalcOutput`` is used
to verify the test output.

Our inspiration for the above comes from `<http://doc.sagemath.org/html/en/developer/coding_basics.html#writing-testable-examples>`_.
