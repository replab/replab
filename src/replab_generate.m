function result = replab_generate(what)
% Code generation function
%
% Depending on the value of the argument ``what``:
%
% - ``clear`` clears out all directories with autogenerated code
%
% - ``doctests`` extracts the doctests from the source code and writes them to the doctests code folder.
%
% - ``notebooktests`` extracts the jupyter notebooks from the doc and write them to the notebooks code folder
%
% - ``all`` regenerates all code
%
% Args:
%   what ({'clear', 'doctests', 'notebooks', 'all'}, optional): What to generate, default ``'all'``
%
% Returns:
%     logical: True unless an error was detected

    if nargin < 1
        what = 'all';
    end
    
    result = true;
    
    logFun = @(str) disp(str);
    valid = {'clear' 'doctests' 'notebooktests' 'all'};
    validStr = strjoin(cellfun(@(x) sprintf('''%s''', x), valid, 'uniform', 0), ', ');
    assert(ismember(what, valid), 'Argument must be one of: %s', validStr);

    rp = replab.globals.replabPath;

    srcRoot = fullfile(rp, 'src');
    if isequal(what, 'doctests') || isequal(what, 'all')
        logFun('Crawling code base');
        cb = replab.infra.crawl(srcRoot);
    end
    
    if isequal(what, 'doctests') || isequal(what, 'all') || isequal(what, 'clear')
        % Generate doctests
        generatedRoot = fullfile(rp, 'generated');
        doctestRoot = fullfile(rp, 'generated', 'doctests');
        replab.infra.mkCleanDir(generatedRoot, 'doctests', logFun);
        if ~isequal(what, 'clear')
            logFun('Generating doctests');
            els = cb.allSourceElements;
            pb = replab.infra.repl.ProgressBar(length(els));
            for i = 1:length(els)
                pb.step(i, els{i}.fullIdentifier);
                replab.infra.doctests.writeElementDocTests(doctestRoot, els{i});
            end
            pb.finish;
        end
    end

    if isequal(what, 'notebooktests') || isequal(what, 'all') || isequal(what, 'clear')
        % Generate a copy of the jupyter notebooks to test them
        generatedRoot = fullfile(rp, 'generated');
        notebooktestsRoot = fullfile(rp, 'generated', 'notebooktests');
        replab.infra.mkCleanDir(generatedRoot, 'notebooktests', logFun);
        if ~isequal(what, 'clear')
            logFun('Copying jupyter notebooktests');
            els = replab.infra.notebooks.listNotebooks;
            pb = replab.infra.repl.ProgressBar(length(els));
            for i = 1:length(els)
                pb.step(i, els{i,3});
                replab.infra.notebooks.writeNotebook(notebooktestsRoot, els(i,:));
            end
            pb.finish;
        end
    end

end
