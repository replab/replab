function result = replab_generate(what)
% Code and website generation function
%
% Depending on the value of the argument ``what``:
%
% - ``all`` regenerates all generated code/documentation
%
% - ``clear`` clears out all directories with autogenerated code/doc
%
% - ``sphinxsrc`` prepares a source folder on which to run Sphinx
%
% - ``sphinxbuild`` runs the Sphinx documentation generation.
%
% - ``sphinx`` runs all the Sphinx generation steps.
%
% - ``doctests`` extracts the doctests from the source code and writes them to the doctests code folder.
%
% - ``notebooks`` extracts the jupyter notebooks from the doc and write them to the notebooks code folder
%
% Args:
%   what ({'clear', 'sphinx*', 'sphinx', 'doctests', 'notebooks', 'all'}, optional): What to generate, default ``'all'``
%
% Results:
%     logical: True unless an error was detected

    if nargin < 1
        what = 'all';
    end
    
    result = true;
    
    logFun = @(str) disp(str);
    valid = {'clear' 'sphinxsrc' 'sphinxbuild' 'sphinx' 'doctests' 'notebooks' 'all'};
    validStr = strjoin(cellfun(@(x) sprintf('''%s''', x), valid, 'uniform', 0), ', ');
    assert(ismember(what, valid), 'Argument must be one of: %s', validStr);

    rp = replab.globals.replabPath;

    srcRoot = fullfile(rp, 'src');
    if isequal(what, 'sphinxsrc') || isequal(what, 'sphinx') || isequal(what, 'doctests') || isequal(what, 'all')
        logFun('Crawling code base');
        cb = replab.infra.crawl(srcRoot);
    end

    sphinxRoot = fullfile(rp, 'sphinx');
    sphinxPreprocessed = fullfile(rp, '_sphinx');
    if isequal(what, 'sphinxsrc') || isequal(what, 'sphinx') || isequal(what, 'all') || isequal(what, 'clear')
        if isequal(what, 'clear')
            replab.infra.mkCleanDir(rp, '_sphinx', logFun);
        else
            % Create a copy of the Sphinx source folder and update the
            % matlab doc links
            replab_generate_sphinxsrc_docpp(sphinxRoot, sphinxPreprocessed, 'https://replab.github.io/replab', fullfile(sphinxRoot, 'objects.inv'));
            
            % Generate Sphinx preprocessed source files
            sphinxPreprocessSrc = fullfile(sphinxPreprocessed, '_src');
            replab_generate_sphinxsrc_codepp(cb, sphinxPreprocessSrc);
            
            % Also copy root files from the root source folders into a
            % ``root`` subdirectory so they can appear in the Sphinx Matlab
            % domain under a "module" name.
            mkdir(sphinxPreprocessSrc, 'root');
            files = dir([sphinxPreprocessSrc filesep '*.m']);
            for i = 1:length(files)
                assert(~files(i).isdir, 'Files ending in .m cannot be directories');
                name = files(i).name;
                copyfile(fullfile(sphinxPreprocessSrc, name), fullfile(sphinxPreprocessSrc, 'root', name));
            end
            files = dir([rp filesep '*.m']);
            for i = 1:length(files)
                assert(~files(i).isdir, 'Files ending in .m cannot be directories');
                name = files(i).name;
                copyfile(fullfile(rp, name), fullfile(sphinxPreprocessSrc, 'root', name));
            end
        end
    end

    if isequal(what, 'sphinxbuild') || isequal(what, 'sphinx') || isequal(what, 'all')
        sphinxTarget = fullfile(rp, 'docs');
        if ~exist(sphinxTarget, 'dir')
            mkdir(sphinxTarget);
        end
        replab.infra.cleanDir(sphinxTarget, {'.git'});
        if ~isequal(what, 'clear')
            % Launch sphinx
            logFun('Running Sphinx');
            cmd = ['sphinx-build -b html ', sphinxPreprocessed, ' ', sphinxTarget];
            logFun(['Running ' cmd]);
            status = system(cmd);
            if status ~= 0
                result = false;
            end
        end
    end

    if isequal(what, 'doctests') || isequal(what, 'all') || isequal(what, 'clear')
        % Generate doctests
        testRoot = fullfile(rp, 'tests');
        doctestRoot = fullfile(rp, 'tests', 'doctests');
        replab.infra.mkCleanDir(testRoot, 'doctests', logFun);
        if ~isequal(what, 'clear')
            logFun('Generating doctests');
            els = cb.allSourceElements;
            pb = replab.infra.repl.ProgressBar(length(els));
            for i = 1:length(els)
                pb.step(i, els{i}.fullIdentifier);
                replab.infra.doctests.writeElementDocTests(doctestRoot, els{i});
            end
            pb.finish;
        end
    end

    if isequal(what, 'notebooks') || isequal(what, 'all') || isequal(what, 'clear')
        % Generate a copy of the jupyter notebooks
        testRoot = fullfile(rp, 'tests');
        notebooksRoot = fullfile(rp, 'tests', 'notebooks');
        replab.infra.mkCleanDir(testRoot, 'notebooks', logFun);
        if ~isequal(what, 'clear')
            logFun('Copying jupyter notebooks');
            els = replab.infra.notebooks.listNotebooks;
            pb = replab.infra.repl.ProgressBar(length(els));
            for i = 1:length(els)
                pb.step(i, els{i,3});
                replab.infra.notebooks.writeNotebook(notebooksRoot, els(i,:));
            end
            pb.finish;
        end
    end

end
