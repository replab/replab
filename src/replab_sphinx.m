function result = replab_sphinx(what, varargin)
% Documentation generation function
%
% Depending on the value of the argument ``what``:
%
% - ``clear`` clears out all directories with autogenerated doc
%
% - ``ppdoc`` only pre-processes the Sphinx documents
%
% - ``ppsrc`` only pre-processes the src folder
%
% - ``preprocessing`` calls successively ``ppdoc`` and ``ppsrc``
%
% - ``build`` only runs the Sphinx documentation generation
%
% - ``all`` regenerates all documentation by calling successively
%   ``preprocessing`` and ``build``
%
% - ``doublePass`` performs a double build: the first run creates an up to
%   date inventory file, which is then use in the second round. This
%   ensures that all links in the documenttion are up to date with the
%   current API. In case the keyword argument ``srcFolder`` is erased,
%   there is no code inventory to build, so this is identical to ``all``
%   (i.e. single pass only).
%
% By default, 
%
% Args:
%   what ({'clear', 'ppdoc', 'ppsrc', 'preprocessing', 'build', 'all', 'doublePass'}, optional): What to generate, default ``'all'``
%
% Keyword Args:
%   sphinxRoot (charstring): location of the ``sphinx`` folder, default is [`+replab.+globals.replabPath`, '/sphinx']
%   preprocessedFolder (charstring): folder for temporarily generated files, default is [`+replab.+globals.replabPath`, '/generated']
%   sphinxTarget (charstring): where compile the documentation to, default is [`+replab.+globals.replabPath`, '/docs']
%   inventoryAddress (charstring): either path to the online RepLAB API, or the the local ``objects.inv`` file, default is 'https://replab.github.io/replab'
%   srcFolder (charstring): replab source code folder, empty means none, default is [`+replab.+globals.replabPath`, '/src']
%   additionalSrc (cell{1,\*} of charstring): folders containing additional non-packaged replab source files, empty means none, default is {`+replab.+globals.replabPath`, [`+replab.+globals.replabPath`, '/src']}
%
% Returns:
%     logical: True unless an error was detected

    if nargin < 1
        what = 'all';
    end
    
    result = true;
    
    logFun = @(str) disp(str);
    valid = {'clear' 'ppdoc' 'ppsrc' 'preprocessing' 'build' 'all' 'doublePass'};
    validStr = strjoin(cellfun(@(x) sprintf('''%s''', x), valid, 'uniform', 0), ', ');
    assert(ismember(what, valid), 'Argument must be one of: %s', validStr);

    args = struct('sphinxRoot', [replab.globals.replabPath, '/sphinx'], ...
        'preprocessedFolder', [replab.globals.replabPath, '/generated'], ...
        'sphinxTarget', [replab.globals.replabPath, '/docs'], ...
        'inventoryAddress', 'https://replab.github.io/replab', ...
        'srcFolder', [replab.globals.replabPath, '/src'], ...
        'additionalSrc', {{replab.globals.replabPath, [replab.globals.replabPath, '/src']}});
    args = replab.util.populateStruct(args, varargin);
    
    if isequal(what, 'doublePass') && isempty(args.srcFolder)
        what = 'all';
    end
    
    sphinxPreprocessed = fullfile(args.preprocessedFolder, 'sphinx');
    if isequal(what, 'ppdoc') || isequal(what, 'preprocessing') || isequal(what, 'all') || isequal(what, 'doublePass') || isequal(what, 'clear')
        if isequal(what, 'clear')
            replab.infra.mkCleanDir(args.preprocessedFolder, 'sphinx', logFun);
        else
            % Create a copy of the Sphinx source folder
            copyfile(fullfile(args.sphinxRoot, '*'), sphinxPreprocessed);
            
            % Update the matlab notebooks' links
            if isequal(what, 'doublePass')
                replab.scripts.sphinx_doc(args.sphinxRoot, sphinxPreprocessed, 'https://replab.github.io/replab');
            elseif ((length(args.inventoryAddress) > 4) && isequal(args.inventoryAddress(1:4), 'http'))
                replab.scripts.sphinx_doc(args.sphinxRoot, sphinxPreprocessed, args.inventoryAddress);
            else
                replab.scripts.sphinx_doc(args.sphinxRoot, sphinxPreprocessed, 'https://replab.github.io/replab', args.inventoryAddress);
            end
        end
    end

    sphinxPreprocessSrc = fullfile(args.preprocessedFolder, 'src');
    if isequal(what, 'ppsrc') || isequal(what, 'preprocessing') || isequal(what, 'all') || isequal(what, 'doublePass') || isequal(what, 'clear')
        if isequal(what, 'clear')
            replab.infra.mkCleanDir(args.preprocessedFolder, 'src', logFun);
        else
            if ~isempty(args.srcFolder)
                % Generate Sphinx preprocessed source files
                logFun('Crawling code base');
                cb = replab.infra.crawl(args.srcFolder);
                replab.scripts.sphinx_code(cb, sphinxPreprocessSrc);
            end

            if ~isempty(args.additionalSrc)
                mkdir(sphinxPreprocessSrc, 'root');
                for i = 1:length(args.additionalSrc)
                    % Also copy root files from the root source folders into a
                    % ``root`` subdirectory so they can appear in the Sphinx Matlab
                    % domain under a "module" name.
                    if isequal(args.additionalSrc{i}, args.srcFolder)
                        files = dir([sphinxPreprocessSrc filesep '*.m']);
                        for j = 1:length(files)
                            assert(~files(j).isdir, 'Files ending in .m cannot be directories');
                            name = files(j).name;
                            copyfile(fullfile(sphinxPreprocessSrc, name), fullfile(sphinxPreprocessSrc, 'root', name));
                        end
                    else
                        files = dir([args.additionalSrc{i} filesep '*.m']);
                        for j = 1:length(files)
                            assert(~files(j).isdir, 'Files ending in .m cannot be directories');
                            name = files(j).name;
                            copyfile(fullfile(args.additionalSrc{i}, name), fullfile(sphinxPreprocessSrc, 'root', name));
                        end
                    end
                end
            end
        end
    end
    
    if isequal(what, 'build') || isequal(what, 'all') || isequal(what, 'doublePass') || isequal(what, 'clear')
        if ~exist(args.sphinxTarget, 'dir')
            mkdir(args.sphinxTarget);
        end
        replab.infra.cleanDir(args.sphinxTarget, {'.git'});
        if ~isequal(what, 'clear')
            % Launch sphinx
            logFun('Running Sphinx');
            cmd = ['sphinx-build -b html ', args.preprocessedFolder, '/sphinx ', args.sphinxTarget];
            logFun(['Running ' cmd]);
            status = system(cmd);
            if status ~= 0
                result = false;
            end
        end
    end
    
    if result && isequal(what, 'doublePass')
        % Relaunch the process with the newly generated inventory file
        tmpInvFile = fullfile(args.preprocessedFolder, 'objects.inv');
        copyfile('docs/objects.inv', args.preprocessedFolder);
        replab.scripts.sphinx('ppdoc', 'sphinxRoot', args.sphinxRoot, ...
            'preprocessedFolder', args.preprocessedFolder, 'sphinxTarget', args.sphinxTarget, ...
            'inventoryAddress', tmpInvFile, 'srcFolder', args.srcFolder, 'additionalSrc', args.additionalSrc);
        result = replab.scripts.sphinx('build', 'sphinxRoot', args.sphinxRoot, ...
            'preprocessedFolder', args.preprocessedFolder, 'sphinxTarget', args.sphinxTarget, ...
            'inventoryAddress', tmpInvFile, 'srcFolder', args.srcFolder, 'additionalSrc', args.additionalSrc);
        delete(tmpInvFile);
    end
end
